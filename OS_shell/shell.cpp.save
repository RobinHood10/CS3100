// Main Function

#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <chrono>
#include <cmath>
#include <sstream>
#include <string>
#include <cstring>
#include <vector>

int main() {

	double ptime=0;
	std::vector<std::string> hist;
	hist[0]="History of input commands:";

	std::cout<<"[cmd]:  ";

	//main approach: get a command, fork into command's program with execvp
	//execvp is replaced by the process it calls and will never terminate itself

	bool noexit = 1;	//subtle literary reference

	while (noexit) {

		//modus operandi

		std::cout << "[cmd]:  ";
		std::string instream = NULL;
		std::cin >> instream;
		hist.push_back(instream);

		//parse instream
		std::istringstream iss(instream);
		std::string word;
		std::vector<std::string> arguments;
		while(iss>>word){
			arguments.push_back(word);
		}

		if (arguments[0] == "exit"||"^C")
			noexit = 0;
			break;

		if (arguments[0] != "history" || "ptime" || "^") {	//CHECK: is this valid?
			std::cout << "That is not a valid command. Valid commands are: \n";
			std::cout << " ptime, history, ^ (number), or exit.\n";
		}

		if (fork()) {
			//do fork things
			std::chrono::time_point<std::chrono::high_resolution_clock> start =
				std::chrono::high_resolution_clock::now();
			wait(NULL);
			std::chrono::time_point<std::chrono::high_resolution_clock> end =
				std::chrono::high_resolution_clock::now();
			std::chrono::duration<double> time = end-start;
			ptime+=static_cast<double>(time);
		}
		else {
			//do child things
			//execvp the command
			int SIZE=instream.size()+2;
			char** argv = new char*[SIZE];
			argv[0]=new char[arguments[0].length()+1];
			strcpy(argv[0], arguments[0].c_str());
			for(int i=1;i<arguments.size();i++){
	
			argv[i]=new char[arguments[i].length()+1];
				strcpy(argv[i], arguments[i].c_str());
			}
			argv[arguments.size()]=NULL;
			//first argument: int index
			//second argument: vector hist
			//third argument: double time

			execvp (argv[0],argv);
			//args have hyphen first?
		}
	}

}



float ptime(int index, std::vector<std::string>& hist, double time) {
	std::cout << "Total execution time of child processes: ";
	std::cout << time << "seconds.\n";
}


std::string history(int index, std::vector<std::string>&  hist, double time){
	//store commands and arguments as a vector, then print them out
	//start record at index 1
	for (int i=0; i<hist.size(); i++){
		std::cout<<hist[i];
	}
}

void '^'(int index, std::vector<std::string>& hist, double time){
	std::string instring=hist[int];
	//idea: just execvp the thing again?

}
